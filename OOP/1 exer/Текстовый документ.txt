#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

void cin_clear(string title) {
        cin.clear();
        cin.ignore(32767, '\n');
        cout << "\nError! " << title;
}

class Student_Kosov {
private:
    string first_name;
    string second_name;
    int age;
    double several_mark;

public:
    int id;
    void init_student(int valueId) {
        id = valueId;

        cout << "Input first name:\n";
        cin >> first_name;

        cout << "Input second name:\n";
        cin >> second_name;

        cout << "Input age:\n";
        while (!(cin >> age) || (age < 0)) {
            cin_clear("Try again...\n");
        };
        
        cout << "Input several mark:\n";
        while (!(cin >> several_mark) || (several_mark < 0)) {
            cin_clear("Try again...\n");
        };
        
    };

    int get_id() {
        return id;
    };

    void print_info() {
        cout << "\nid: " << id << "\nfirst name: " << first_name <<
            "\nsecond name: " << second_name << "\nage: " << age <<
            "\nseveral mark: " << several_mark << "\n";
    };

    friend ifstream& operator>>(ifstream& input, Student_Kosov& student) {
        input >> student.id >> student.first_name >> student.second_name >> student.age >> student.several_mark;
        return input;
    }

    void write_to_file(string nameFile) {
        ofstream outputFile(nameFile, ios::app);

        if (!outputFile) {
            cerr << "\nError open. Try again\n" << endl;
            return;
        }

        outputFile <<
            id << endl <<
            first_name << endl <<
            second_name << endl <<
            age << endl <<
            several_mark << endl;

        outputFile.close();
    }
};

class Group {
private: 

    vector<Student_Kosov> students;
public:
    void input_student(Student_Kosov& student) {
        students.push_back(student);
    }
    int size_group() {
        return (int)students.size();
    }

    void print_all() {
        if (students.size() == 0) {
            cout << "Nothing to output:(\n";
        }
        for_each(students.begin(), students.end(), [](Student_Kosov& student) {
            student.print_info();
            });
    }

    void write_to_file(string way_to_file) {
        for_each(students.begin(), students.end(), [way_to_file](Student_Kosov& student) {
            student.write_to_file(way_to_file);
            });
    }

    void clearr() {
        students.clear();
    }
};

int check_id(Student_Kosov& student, int size) {
    int id = student.get_id();
    if (student.get_id() <= size) {
        id = size + 1;
    }
    return id;
}

int main()
{
    int choise, flag = 0, id = 0;
    Student_Kosov student;
    Group group;
    while (flag != 1) {
        cout << "\nChoose next:\n1. Input new student.\n2. Output students.\n3. Input students from file.\n4. Output student in file.\n5. Clear.\n0. Exit.\n";
        while (!(cin >> choise)) {
            cin_clear("Try again...\n");
        };
        switch (choise) {
        case 1: {
            student.init_student(++id);
            group.input_student(student);
            break;
        }
        case 2: {

            group.print_all();
            break;
        }
        case 3: {
            string way_to_file;
            cout << "Input way to file:\n";
            cin >> way_to_file;
            ifstream file(way_to_file);
            if (!file.is_open()) {
                cerr << "Can`t open file.\n";
                break;
            }
            while (file >> student) {
                id = check_id(student, group.size_group());
                student.id = id;
                group.input_student(student);
            }
            file.close();
            cout << "Success\n";
            break;
        }
        case 4: {
            string way_to_file;
            cout << "Input way to file:\n";
            cin >> way_to_file;
            ofstream file(way_to_file);
            if (!file.is_open()) {
                cerr << "Can`t open file.\n";
                break;
            }
            file << "";

            group.write_to_file(way_to_file);
            file.close();
            cout << "Success\n";
            break;
        }
        case 5: {
            group.clearr();
            cout << "Success\n";
            break;
        }
        case 0: {
            flag = 1;
            cout << "Exit...";
            break;
        }
        default: {
            cout << "Try again...\n";
            break;
        }
        }
    }
    return 0;
};